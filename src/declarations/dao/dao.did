type canister_id = principal;
type UserNumber = nat64;
type Subaccount = blob;
type Result = 
 variant {
   err: text;
   ok: text;
 };
type Proposal = 
 record {
   id: int;
   "principal": principal;
   "text": text;
   vote_no: nat;
   vote_yes: nat;
 };
type Neuron = 
 record {
   account: Account;
   delay: int;
   id: principal;
   locked_tokens: int;
   state: variant {
            dissolved;
            dissolving;
            locked;
          };
 };
type FrontendHostname = text;
type Dao = 
 service {
   execute_accepted_proposals: () -> ();
   get_all_neurons: () -> (vec record {
                                 int;
                                 Neuron;
                               }) query;
   get_all_proposals: () -> (vec record {
                                   int;
                                   Proposal;
                                 }) query;
   get_canister_status: (canister_id) -> (record {cycles: nat;});
   get_neuron: (int) -> (opt Neuron) query;
   get_principal: () -> (principal);
   get_principal_from_II: (UserNumber, FrontendHostname) -> (principal);
   get_proposal: (int) -> (opt Proposal) query;
   lock_neuron: (nat, int) -> (Result);
   set_neuron_dissolving: (int) -> (Result);
   submit_proposal: (text) -> (variant {
                                 Err: text;
                                 Ok: Proposal;
                               });
   vote: (int, bool) -> (variant {
                           Err: text;
                           Ok: record {
                                 nat;
                                 nat;
                               };
                         });
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : () -> Dao
